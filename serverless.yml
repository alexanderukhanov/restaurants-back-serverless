org: ukhanov
app: restaurants-back-serverless
service: restaurants-back-serverless
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
      allowCredentials: true
    authorizers:
      customJWTAuthorizer:
        type: request
        functionName: authorizerFunc
      customOptionalJWTAuthorizer:
        type: request
        functionName: optionalAuthorizer
  vpc:
    securityGroupIds:
      - sg-0b937898d9e34382e #rds
      - sg-0dfbe1ee7b8def949 #s3
    subnetIds:
      - subnet-0f3f8949ce39b6df1 #rds
  runtime: nodejs18.x
  environment:
    DB_DATABASE: ${param:database}
    DB_USER: ${param:user}
    DB_PORT: ${param:port}
    DB_PASSWORD: ${param:password}
    DB_HOST: ${param:host}
    JWT_SECRET: ${param:JWT_SECRET}
    ACCESS_KEY: ${param:ACCESS_KEY}
    SECRET_ACCESS_KEY: ${param:SECRET_ACCESS_KEY}

functions:
  authorizerFunc:
    handler: ./handlers/authorizer.handler
  optionalAuthorizer:
    handler: ./handlers/authorizer.optionalAuthorizer
  login:
    handler: ./handlers/auth.login
    events:
      - httpApi:
          path: /api/auth/login
          method: post
  logout:
    handler: ./handlers/auth.logout
    events:
      - httpApi:
          path: /api/auth/logout
          method: get
  getProfile:
    handler: ./handlers/users.getProfile
    events:
      - httpApi:
          path: /api/users/profile
          method: get
          authorizer:
            name: customJWTAuthorizer
  addRestaurant:
    handler: ./handlers/restaurants.addRestaurant
    events:
      - httpApi:
          path: /api/restaurants/add
          method: post
          authorizer:
            name: customJWTAuthorizer
  updateRestaurant:
    handler: ./handlers/restaurants.updateRestaurant
    events:
      - httpApi:
          path: /api/restaurants/update
          method: put
          authorizer:
            name: customJWTAuthorizer
  updateRestaurantLike:
    handler: ./handlers/restaurants.updateRestaurantLike
    events:
      - httpApi:
          path: /api/restaurants/likeRestaurant
          method: put
          authorizer:
            name: customJWTAuthorizer
  deleteRestaurant:
    handler: ./handlers/restaurants.deleteRestaurant
    events:
      - httpApi:
          path: /api/restaurants/{id}
          method: delete
          authorizer:
            name: customJWTAuthorizer
  getRestaurants:
    handler: ./handlers/restaurants.getRestaurants
    events:
      - httpApi:
          path: /api/restaurants/all
          method: get
          authorizer:
            name: customOptionalJWTAuthorizer
  updateDish:
    handler: ./handlers/dishes.updateDish
    events:
      - httpApi:
          path: /api/dishes/update
          method: put
          authorizer:
            name: customJWTAuthorizer
  deleteDish:
    handler: ./handlers/dishes.deleteDish
    events:
      - httpApi:
          path: /api/dishes/{id}
          method: delete
          authorizer:
            name: customJWTAuthorizer
  addOrder:
    handler: ./handlers/orders.addOrder
    events:
      - httpApi:
          path: /api/orders/add
          method: post
          authorizer:
            name: customJWTAuthorizer
  deleteOrder:
    handler: ./handlers/orders.deleteOrder
    events:
      - httpApi:
          path: /api/orders/{id}
          method: delete
          authorizer:
            name: customJWTAuthorizer
#DynamoDB
  getRestaurantsWithPagination:
    handler: ./handlers/dynamo.getRestaurantsWithPagination
    events:
      - httpApi:
          path: /api/dynamo/restaurants/all
          method: get
  getRestaurantWithDishesDynamo:
    handler: ./handlers/dynamo.getRestaurantWithDishesDynamo
    events:
      - httpApi:
          path: /api/dynamo/restaurant
          method: get
  getDishesOfRestaurantDynamo:
    handler: ./handlers/dynamo.getDishesOfRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/dishes
          method: get
  getDishesByNameDynamo:
    handler: ./handlers/dynamo.getDishesByNameDynamo
    events:
      - httpApi:
          path: /api/dynamo/dishes-by-name
          method: get
  addDishesForRestaurantDynamo:
    handler: ./handlers/dynamo.addDishesForRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/dishes/add
          method: post
  addRestaurantDynamo:
    handler: ./handlers/dynamo.addRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/restaurant/add
          method: post
  updateRestaurantDynamo:
    handler: ./handlers/dynamo.updateRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/restaurant/update
          method: put
  deleteDishesByRestaurantDynamo:
    handler: ./handlers/dynamo.deleteDishesByRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/dishes/delete
          method: delete
  deleteRestaurantDynamo:
    handler: ./handlers/dynamo.deleteRestaurantDynamo
    events:
      - httpApi:
          path: /api/dynamo/restaurant/delete
          method: delete

resources:
  Resources:
    Restaurants:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: Restaurants
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: Type
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
          - AttributeName: Type
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Dishes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Dishes
        AttributeDefinitions:
          - AttributeName: RestaurantId
            AttributeType: S
          - AttributeName: Id
            AttributeType: S
          - AttributeName: Name
            AttributeType: S
          - AttributeName: Cost
            AttributeType: N
        KeySchema:
          - AttributeName: RestaurantId
            KeyType: HASH
          - AttributeName: Id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: DishNameIndex
            KeySchema:
              - AttributeName: Name
                KeyType: HASH
              - AttributeName: Cost
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

# full serverless typescript
# serverless sequelize
# manual mutation creation and applying it to rds
# jwt authentication like reusable middleware
# cookies setting and removing
# full request validation
# rds connection via vpc
# s3 connection via vpc
# serverless cors
# add endpoint for DynamoDB in order to let lambda access from private subnet
# CRUD operations DynamoDB + pagination + GSI using
